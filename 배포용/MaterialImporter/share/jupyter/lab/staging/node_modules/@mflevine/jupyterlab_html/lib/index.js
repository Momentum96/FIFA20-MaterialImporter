"use strict";
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var widgets_1 = require("@phosphor/widgets");
require("../style/index.css");
/**
 * The CSS class to add to the Plotly Widget.
 */
var CSS_CLASS = 'jp-RenderedIFrame';
/**
 * The CSS class for a Plotly icon.
 */
var CSS_ICON_CLASS = 'jp-MaterialIcon jp-HTMLIcon';
/**
 * The MIME type for HTML.
 */
exports.MIME_TYPE = 'application/jupyterlab_html';
exports.HTML_CLASS = 'jp-HTMLViewer';
exports.HTML_CONTAINER_CLASS = 'jp-HTMLContainer';
var RenderedIFrame = /** @class */ (function (_super) {
    __extends(RenderedIFrame, _super);
    /**
     * Create a new widget for rendering HTML.
     */
    function RenderedIFrame(options) {
        var _this = _super.call(this, { node: Private.createNode() }) || this;
        _this.addClass(CSS_CLASS);
        _this._mimeType = options.mimeType;
        return _this;
    }
    /**
     * Render HTML in IFrame into this widget's node.
     */
    RenderedIFrame.prototype.renderModel = function (model) {
        var data = model.data[this._mimeType];
        var blob = new Blob([data], { type: "text/html" });
        this.node.querySelector('iframe').setAttribute('src', URL.createObjectURL(blob));
        return Promise.resolve(void 0);
    };
    return RenderedIFrame;
}(widgets_1.Widget));
exports.RenderedIFrame = RenderedIFrame;
/**
 * A mime renderer factory for HTML data.
 */
exports.rendererFactory = {
    safe: true,
    mimeTypes: [exports.MIME_TYPE],
    createRenderer: function (options) { return new RenderedIFrame(options); }
};
var extensions = [
    {
        id: '@jupyterlab_html:factory',
        rendererFactory: exports.rendererFactory,
        rank: 0,
        dataType: "string",
        fileTypes: [{
                name: 'html',
                mimeTypes: [exports.MIME_TYPE],
                extensions: ['.html'],
                iconClass: CSS_ICON_CLASS
            }],
        documentWidgetFactoryOptions: {
            name: 'View HTML',
            primaryFileType: 'html',
            fileTypes: ['html'],
            defaultFor: ['html']
        }
    }
];
exports.default = extensions;
/**
 * A namespace for HTML widget private data.
 */
var Private;
(function (Private) {
    /**
     * Create the node for the HTML widget.
     */
    function createNode() {
        var node = document.createElement('div');
        node.className = exports.HTML_CONTAINER_CLASS;
        var iframe = document.createElement('iframe');
        iframe.style.height = '100%';
        iframe.style.width = '100%';
        iframe.className = exports.HTML_CLASS;
        iframe.setAttribute('type', exports.MIME_TYPE);
        node.appendChild(iframe);
        return node;
    }
    Private.createNode = createNode;
})(Private || (Private = {}));
