import { Message } from '@phosphor/messaging';
import { Widget } from '@phosphor/widgets';
import { ISignal } from '@phosphor/signaling';
import { ABCWidgetFactory, DocumentRegistry, DocumentWidget, IDocumentWidget } from '@jupyterlab/docregistry';
import '../style/index.css';
/**
 * The MIME type for PDF.
 */
export declare const MIME_TYPE = "application/pdf";
/**
 * The CSS class for the viewer defined by PDFJS.
 */
export declare const PDF_CLASS = "pdfViewer";
/**
 * The CSS class for our PDF container.
 */
export declare const PDF_CONTAINER_CLASS = "jp-PDFJSContainer";
/**
 * The step in scaling factors for zooming the PDF viewer.
 */
export declare const SCALE_DELTA = 1.1;
/**
 * The maximum scaling factor for zooming the PDF viewer.
 */
export declare const MAX_SCALE = 10;
/**
 * The minimum scaling factor for zooming the PDF viewer.
 */
export declare const MIN_SCALE = 0.25;
/**
 * Include a margin for scrolling the PDF.
 */
export declare const MARGIN = 72;
/**
 * A class for rendering a PDF document.
 */
export declare class PDFJSViewer extends Widget {
    constructor(context: DocumentRegistry.Context);
    /**
     * The pdfjs widget's context.
     */
    readonly context: DocumentRegistry.Context;
    /**
     * The underlying PDFJS viewer/
     */
    readonly viewer: any | undefined;
    /**
     * A promise that resolves when the pdf viewer is ready.
     */
    readonly ready: Promise<void>;
    /**
     * Get the scroll position.
     */
    /**
    * Set the scroll position.
    */
    position: PDFJSViewer.IPosition;
    /**
     * Dispose of the resources held by the pdf widget.
     */
    dispose(): void;
    readonly positionRequested: ISignal<this, PDFJSViewer.IPosition>;
    /**
     * Handle a change to the title.
     */
    private _onTitleChanged;
    /**
     * Render PDF into this widget's node.
     */
    private _render;
    /**
     * Handle DOM events for the widget.
     */
    handleEvent(event: Event): void;
    private _handleClick;
    private _clientToPDFPosition;
    /**
     * Handle `after-attach` messages for the widget.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * Handle `before-detach` messages for the widget.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * Fit the PDF to the widget width.
     */
    fit(): void;
    /**
     * Handle `update-request` messages for the widget.
     */
    protected onUpdateRequest(msg: Message): void;
    private _viewer;
    private _ready;
    private _objectUrl;
    private _pdfDocument;
    private _positionRequested;
    private _hasRendered;
}
/**
 * A document widget for PDFJS content widgets.
 */
export declare class PDFJSDocumentWidget extends DocumentWidget<PDFJSViewer> implements IDocumentWidget<PDFJSViewer> {
    constructor(context: DocumentRegistry.Context);
}
/**
 * A widget factory for images.
 */
export declare class PDFJSViewerFactory extends ABCWidgetFactory<IDocumentWidget<PDFJSViewer>, DocumentRegistry.IModel> {
    /**
     * Create a new widget given a context.
     */
    protected createNewWidget(context: DocumentRegistry.IContext<DocumentRegistry.IModel>): IDocumentWidget<PDFJSViewer>;
}
/**
 * A namespace for PDFJSViewer statics.
 */
export declare namespace PDFJSViewer {
    /**
     * The options for a SyncTeX edit command,
     * mapping the pdf position to an editor position.
     */
    interface IPosition {
        /**
         * The page of the pdf.
         */
        page: number;
        /**
         * The x-position on the page, in pts, where
         * the PDF is assumed to be 72dpi.
         */
        x: number;
        /**
         * The y-position on the page, in pts, where
         * the PDF is assumed to be 72dpi.
         */
        y: number;
    }
}
